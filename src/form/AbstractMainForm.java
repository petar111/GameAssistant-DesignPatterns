/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import form.dialog.DialogNewGame;
import java.awt.BorderLayout;
import java.awt.Color;
import javax.swing.JPanel;
import observer.lightmode.LightMode;
import observer.lightmode.LightModeColors;
import observer.lightmode.LightModeListener;
import observer.lightmode.LightModeManager;
import panel.commands.AbstractPanelCommands;
import panel.gamevisual.AbstractPanelGameAnalytics;
import panel.gamevisual.AbstractPanelGameConfig;
import panel.gamevisual.AbstractPanelGameInfo;
import panel.gamevisual.PanelGameVisual;
import panel.gamevisual.factory.AbstractPanelGameVisualFactory;
import session.Session;

/**
 *
 * @author siux
 */
public abstract class AbstractMainForm extends javax.swing.JFrame {

    /**
     * Creates new form AbstractMainForm
     */
    public AbstractMainForm() {
        initComponents();
        lightModeManager = new LightModeManager();
    }

    
    public String getSelectedStrategy(){
        return pnlGameConfig.getSelectedStrategy();
    }
    
    public void refreshComponents(){
        pnlGameInfo.refreshView();
        pnlGameConfig.refreshView();
        pnlGameAnalytics.refreshView();
        pnlCommands.refreshView();
        
        lightModeManager.setLightMode(lightModeManager.getColors());
        
        pack();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jmbMain = new javax.swing.JMenuBar();
        jmnFile = new javax.swing.JMenu();
        jmiFileClone = new javax.swing.JMenuItem();
        jmnView = new javax.swing.JMenu();
        jmiViewDarkMode = new javax.swing.JMenuItem();
        jmiLightMode = new javax.swing.JMenuItem();
        jmnGame = new javax.swing.JMenu();
        jmiGameNew = new javax.swing.JMenuItem();
        jmiGameConfig = new javax.swing.JMenuItem();
        jmiGameSave = new javax.swing.JMenuItem();
        jmiGameLoad = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jmnFile.setText("File");

        jmiFileClone.setText("Clone");
        jmnFile.add(jmiFileClone);

        jmbMain.add(jmnFile);

        jmnView.setText("View");

        jmiViewDarkMode.setText("Dark mode");
        jmiViewDarkMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiViewDarkModeActionPerformed(evt);
            }
        });
        jmnView.add(jmiViewDarkMode);

        jmiLightMode.setText("Light mode");
        jmiLightMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiLightModeActionPerformed(evt);
            }
        });
        jmnView.add(jmiLightMode);

        jmbMain.add(jmnView);

        jmnGame.setText("Game");

        jmiGameNew.setText("New...");
        jmiGameNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGameNewActionPerformed(evt);
            }
        });
        jmnGame.add(jmiGameNew);

        jmiGameConfig.setText("Configure...");
        jmnGame.add(jmiGameConfig);

        jmiGameSave.setText("Save");
        jmnGame.add(jmiGameSave);

        jmiGameLoad.setText("Load...");
        jmnGame.add(jmiGameLoad);

        jmbMain.add(jmnGame);

        setJMenuBar(jmbMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiGameNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGameNewActionPerformed
        DialogNewGame dialogNewGame = new DialogNewGame(this, true);
        dialogNewGame.setVisible(true);
        
        if(Session.INSTANCE.getGameSession() == null){
            return;
        }
        
        getContentPane().remove(pnlGameVisual);
        panelGameVisualFactory = makePanelGameVisualFactoryNewGame();
        pnlGameVisual = makePanelGameVisual();
        
        getContentPane().add(pnlGameVisual, java.awt.BorderLayout.CENTER);
        
        refreshComponents();
        
        setLightModeListeners();
        
        
        pack();
        
    }//GEN-LAST:event_jmiGameNewActionPerformed

    private void jmiViewDarkModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiViewDarkModeActionPerformed

        LightModeColors lightModeColors = new LightModeColors();
        lightModeColors.setBackgroundColor(Color.darkGray);
        lightModeColors.setTextColor(Color.WHITE);
        lightModeManager.setLightMode(lightModeColors);
    }//GEN-LAST:event_jmiViewDarkModeActionPerformed

    private void jmiLightModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiLightModeActionPerformed
        LightModeColors lightModeColors = new LightModeColors();
        lightModeColors.setBackgroundColor(null);
        lightModeColors.setTextColor(Color.BLACK);
        lightModeManager.setLightMode(lightModeColors);
    }//GEN-LAST:event_jmiLightModeActionPerformed

    /**
     * @param args the command line arguments
     */
    private AbstractPanelGameVisualFactory panelGameVisualFactory;
    private AbstractPanelGameInfo pnlGameInfo;
    private AbstractPanelGameConfig pnlGameConfig;
    private AbstractPanelGameAnalytics pnlGameAnalytics;

    private AbstractPanelCommands pnlCommands;
    private PanelGameVisual pnlGameVisual;
    
    private LightModeManager lightModeManager;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jmbMain;
    private javax.swing.JMenuItem jmiFileClone;
    private javax.swing.JMenuItem jmiGameConfig;
    private javax.swing.JMenuItem jmiGameLoad;
    private javax.swing.JMenuItem jmiGameNew;
    private javax.swing.JMenuItem jmiGameSave;
    private javax.swing.JMenuItem jmiLightMode;
    private javax.swing.JMenuItem jmiViewDarkMode;
    private javax.swing.JMenu jmnFile;
    private javax.swing.JMenu jmnGame;
    private javax.swing.JMenu jmnView;
    // End of variables declaration//GEN-END:variables

    public void construct() {
        pnlCommands = makePanelCommands();
        panelGameVisualFactory = makePanelGameVisualFactoryIntro();
        
        pnlGameVisual = makePanelGameVisual();
        
        getContentPane().add(pnlCommands, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(pnlGameVisual, java.awt.BorderLayout.CENTER);
    }

    protected abstract AbstractPanelCommands makePanelCommands();
    protected abstract AbstractPanelGameVisualFactory makePanelGameVisualFactoryIntro();
    protected abstract AbstractPanelGameVisualFactory makePanelGameVisualFactoryNewGame();

    private PanelGameVisual makePanelGameVisual(){
        
        pnlGameInfo = panelGameVisualFactory.makePanelGameInfo();
        pnlGameInfo.prepareInfo();
        pnlGameConfig = panelGameVisualFactory.makePanelGameConfig();
        pnlGameAnalytics = panelGameVisualFactory.makePanelGameAnalytics();
        
        PanelGameVisual result = new PanelGameVisual();
        
        result.add(pnlGameInfo, BorderLayout.NORTH);
        result.add(pnlGameConfig, BorderLayout.WEST);
        result.add(pnlGameAnalytics, BorderLayout.CENTER);
        
        return result;
    }

    private void setLightModeListeners() {
        if(pnlGameInfo instanceof LightModeListener){
            lightModeManager.attach((LightModeListener)pnlGameInfo);
        }
        if(pnlGameConfig instanceof LightModeListener){
            lightModeManager.attach((LightModeListener)pnlGameConfig);
        }
        if(pnlGameAnalytics instanceof LightModeListener){
            lightModeManager.attach((LightModeListener)pnlGameAnalytics);
        }
    }

    
}
