/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panel.gamevisual.impl;

import session.game.player.Player;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javafx.scene.layout.Border;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import observer.lightmode.LightModeListener;
import observer.lightmode.LightModeManager;
import panel.gamevisual.AbstractPanelGameConfig;
import session.Session;
import session.game.GameSession;

/**
 *
 * @author siux
 */
public class PanelGameConfigBasic extends AbstractPanelGameConfig implements LightModeListener{

    /**
     * Creates new form PanelGameConfigBasic
     */
    public PanelGameConfigBasic() {
        initComponents();
        pnlSelectedStrategy.add(lblSelectedStrategy);
        pnlSelectedStrategy.add(txtSelectedStrategy);
    }
    
    private JPanel[][] configCells;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSelectedStrategy = new javax.swing.JLabel();
        txtSelectedStrategy = new javax.swing.JTextField();
        lblNameP2 = new javax.swing.JLabel();
        lblNameP1 = new javax.swing.JLabel();
        pnlConfig = new javax.swing.JPanel();
        pnlSelectedStrategy = new javax.swing.JPanel();

        lblSelectedStrategy.setText("SelectedStrategy:");

        txtSelectedStrategy.setEditable(false);

        setLayout(new java.awt.BorderLayout());

        lblNameP2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNameP2.setText("jLabel1");
        add(lblNameP2, java.awt.BorderLayout.PAGE_START);

        lblNameP1.setText("jLabel2");
        add(lblNameP1, java.awt.BorderLayout.LINE_START);

        javax.swing.GroupLayout pnlConfigLayout = new javax.swing.GroupLayout(pnlConfig);
        pnlConfig.setLayout(pnlConfigLayout);
        pnlConfigLayout.setHorizontalGroup(
            pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        pnlConfigLayout.setVerticalGroup(
            pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
        );

        add(pnlConfig, java.awt.BorderLayout.CENTER);

        pnlSelectedStrategy.setLayout(new javax.swing.BoxLayout(pnlSelectedStrategy, javax.swing.BoxLayout.X_AXIS));
        add(pnlSelectedStrategy, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void refreshView() {
        GameSession gameSession = Session.INSTANCE.getGameSession();
        Player p1 = gameSession.getClientPlayer();
        Player p2 = gameSession.getPlayers().get(1);
        
        lblNameP1.setText(p1.getName());
        lblNameP2.setText(p2.getName());
        
        int rows = 1 + p1.getStrategies().size();
        int cells = 1 + p2.getStrategies().size();
        
        
        remove(pnlConfig);
        
        pnlConfig = new JPanel(new GridLayout(rows, cells));
        
        configCells = new JPanel[rows][cells];
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cells; j++) {
                configCells[i][j] = new JPanel();
                pnlConfig.add(configCells[i][j]);
            }
        }

        for (int i = 1; i < rows; i++) {
            for (int j = 1; j < cells; j++) {
                JTextArea txtArea = new JTextArea("pay");
                txtArea.setEditable(false);
                
                configCells[i][j].add(txtArea);
            }
        }
        
        List<String> strategiesP1 = new ArrayList<>(p1.getStrategies().keySet());
        
        for (String strategy : strategiesP1) {
            int cellRow = 1 + p1.getStrategies().get(strategy);
            JButton button = new JButton(strategy);
            configCells[cellRow][0].add(button);
            
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String selectedStrategy = controller.Controller.INSTANCE.changeSelectedStrategy(button.getText());
                    txtSelectedStrategy.setText(selectedStrategy);
                }
            });
            List<String> oppStrategies = new ArrayList<>(p1.getStrategiesOpponent().keySet());
            
            for (String oppStrategy : oppStrategies) {
                int cellCol = 1 + p1.getStrategiesOpponent().get(oppStrategy);
                
                int payoffRow = p1.getStrategies().get(strategy);
                int payoffCol = p1.getStrategiesOpponent().get(oppStrategy);
                
                JTextArea txtArea = (JTextArea)configCells[cellRow][cellCol].getComponent(0);
                txtArea.setText("(" + p1.getPayoffs()[payoffRow][payoffCol] + ",");
                
            }
            
        }
        
        List<String> strategiesP2 = new ArrayList<>(p2.getStrategies().keySet());
        
        for (String strategy : strategiesP1) {
            int cellCol = 1 + p2.getStrategies().get(strategy);
            JLabel label = new JLabel(strategy);
            configCells[0][cellCol].add(label);
            
            
            List<String> oppStrategies = new ArrayList<>(p2.getStrategiesOpponent().keySet());
            
            for (String oppStrategy : oppStrategies) {
                int cellRow = 1 + p2.getStrategiesOpponent().get(oppStrategy);
                
                int payoffRow = p2.getStrategies().get(strategy);
                int payoffCol = p2.getStrategiesOpponent().get(oppStrategy);
                
                JTextArea txtArea = (JTextArea)configCells[cellRow][cellCol].getComponent(0);
                txtArea.setText(txtArea.getText() + p2.getPayoffs()[payoffRow][payoffCol] + ")");
            }
           
        }
        
        add(pnlConfig, BorderLayout.CENTER);
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblNameP1;
    private javax.swing.JLabel lblNameP2;
    private javax.swing.JLabel lblSelectedStrategy;
    private javax.swing.JPanel pnlConfig;
    private javax.swing.JPanel pnlSelectedStrategy;
    private javax.swing.JTextField txtSelectedStrategy;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(LightModeManager lightModeManager) {
        setBackground(lightModeManager.getColors().getBackgroundColor());
        pnlConfig.setBackground(lightModeManager.getColors().getBackgroundColor());
        pnlSelectedStrategy.setBackground(lightModeManager.getColors().getBackgroundColor());
        lblNameP1.setBackground(lightModeManager.getColors().getBackgroundColor());
        lblNameP2.setBackground(lightModeManager.getColors().getBackgroundColor());
        
        for (Component component : pnlConfig.getComponents()) {
            component.setBackground(lightModeManager.getColors().getBackgroundColor());
        }
        
        
        lblNameP1.setForeground(lightModeManager.getColors().getTextColor());
        lblNameP2.setForeground(lightModeManager.getColors().getTextColor());
        lblSelectedStrategy.setForeground(lightModeManager.getColors().getTextColor());
        
        for (int i = 1; i < configCells.length; i++) {
            configCells[0][i].getComponent(0).setForeground(lightModeManager.getColors().getTextColor());
        }
        
    }

    @Override
    public String getSelectedStrategy() {
        return txtSelectedStrategy.getText();
    }
}
